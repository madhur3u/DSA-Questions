/*
We can try to sell the stock every day and try to find the maximum profit that can be generated by 
selling the stock on that day. At last, we can return the maximum of these individual maximum profits 
as our answer. 

To find the individual maximum profit on a day ‘i’, we know the selling price, i.e the price of the 
stock on day i, we need to find the buying price. To maximize the profit on day ‘i’, the buying price 
should be the lowest price of the stock from day 0 to day i (see the graph above). This way we can keep 
track of the correct buying price for any day.

Time Complexity: O(N)
Reason: We are performing a single iteration

Space Complexity: O(1)
Reason: No extra space is used.
*/
class Solution {
public:
    int maxProfit(vector<int>& a) {
        
        int n = a.size();
        int profit = 0;             // initial profit 0, we buy sell at same day
        int min_price = a[0];       // set min price to a[0]
        
        for (int i = 1; i < n; i++) {

            // calculate profit, we assume we sell at ith day, so we calculate curr profit = a[i] - min
            // and maximise the profit
            // for next iteration also minimise the min price by comparing with a[i]
            profit = max(profit, a[i] - min_price);
            min_price = min(min_price, a[i]);
        }
        return profit;
    }
};
